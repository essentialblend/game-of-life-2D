#version 460 core

layout(std430, binding = 0) buffer currentStateBuffer {
    int currentState[];
};

layout(std430, binding = 1) buffer nextStateBuffer {
    int nextState[];
};

uniform int numRowCells;
uniform int numColumnCells;

// Local sizes.
layout (local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

// Prototypes
int getNeighbourLifeStatusCount(int index1D);

void main() {

    int arraySize = currentState.length();

    uint xInvocationCount = gl_GlobalInvocationID.x;
    //nextState[xInvocationCount] = 10;
    uint yInvocationCount = gl_GlobalInvocationID.y;
    //nextState[yInvocationCount] = 10;
    int index1D = int(yInvocationCount * numColumnCells + xInvocationCount);

    // Main game logic.
    // Obtain living neighbours.
    int neighboursAlive = getNeighbourLifeStatusCount(index1D);
    int currentLifeStatus = currentState[index1D];

    // If we're currently alive...
    if (currentLifeStatus == 1)
    {   
        // ...and have less than 2 or greater than 3 living neighbours...
        if (neighboursAlive < 2 || neighboursAlive > 3)
        {
            // ...then, we perish.
            nextState[index1D] = 0;
        }
        // ...and have exactly 2 or 3 living neighbours...
        else if (neighboursAlive == 2 || neighboursAlive == 3)
        {
            // ...then, we live.
            nextState[index1D] = 1;
        }
    }
    // Or, if we're currently dead...
    else if (currentLifeStatus == 0)
    {
        // ...and have exactly three living neighbours...
        if (neighboursAlive == 3)
        {
            // ...then, we come alive next iteration.
            nextState[index1D] = 1;
        }
    }
}

int getNeighbourLifeStatusCount(int index1D) {
    int count = 0;

    int x = index1D % numColumnCells;
    int y = index1D / numColumnCells;

    // Define the offsets for the eight neighboring cells
    int offsets[8][2] = {
        {-1, -1}, {0, -1}, {1, -1},
        {-1,  0},          {1,  0},
        {-1,  1}, {0,  1}, {1,  1}
    };

    // Calculate how many neighbouring cells are alive.
    for(int i = 0; i < 8; i++) {
        int neighborX = (x + offsets[i][0] + numColumnCells) % numColumnCells;
        int neighborY = (y + offsets[i][1] + numRowCells) % numRowCells;
        int neighborIndex = neighborY * numColumnCells + neighborX;
        count += currentState[neighborIndex];
    }

    return count;
}